#include <iostream>
#include <sstream>
#include <Windows.h>



bool running = true; 
using namespace std;


int rows = 9; 
int columns = 9;
int rowNumber = 0;
int columnNumber = 0;
int chosenNumber = 0;
string checkIfCompleted = "";

string solvedBoard[9][9]{
	{"1","2","3","4","5","6","7","8","9"},
	{"4","5","7","1","8","9","2","3","6"},
	{"6","8","9","7","2","3","4","1","5"},
	{"2","7","1","8","6","4","9","5","3"},
	{"8","3","5","9","1","2","6","4","7"},
	{"9","6","4","5","3","7","8","2","1"},
	{"3","4","6","2","7","1","5","9","8"},
	{"5","1","2","6","9","8","3","7","4"},
	{"7","9","8","3","4","5","1","6","2"}
}; 

string sodukoBoard[9][9]{
	{"-","-","3","-","-","6","-","-","-"},
	{"-","5","-","1","-","-","-","-","-"},
	{"6","-","-","-","2","3","4","-","-"},
	{"-","7","-","-","-","-","-","5","-"},
	{"-","-","-","9","-","-","-","-","7"},
	{"-","6","4","-","3","-","8","-","-"},
	{"-","4","-","-","-","-","-","-","-"},
	{"-","-","2","-","-","8","3","-","-"},
	{"-","-","-","-","-","-","-","-","-"}
}; 

void setTextColor(int color) {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hConsole, color);
}



						/*      ###############################################
								###    COLOR CHANGE NOT DONE BY ME          ###
								###                                         ###
								###############################################       */


void checkIfWin() {
	for (int row = 0; row < rows; row++) {
		for (int column = 0; column < columns; column++)
			if (sodukoBoard[row][column] != solvedBoard[row][column]) {
				cout << endl << "Sorry not correct";
				return; 
			}
	}
	cout << endl << "Congrats you solved the puzzle!";
	running = false; 
}



void gameRules() {
	cout << "Rule 1 - Each row must contain the numbers from 1 to 9, without repetitions" << endl; 
	cout << "The player must focus on filling each row of the grid while ensuring there are no duplicated numbers.The placement order of the digits is irrelevant." << endl; 

	cout << "Every puzzle, regardless of the difficulty level, begins with allocated numbers on the grid.The player should use these numbers as clues to find which digits are missing in each row." << endl;

	cout << "Rule 2 - Each column must contain the numbers from 1 to 9, without repetitions" << endl;
	cout << "The Sudoku rules for the columns on the grid are exactly the same as for the rows.The player must also fill these with the numbers from 1 to 9, making sure each digit occurs only once per column." << endl; 

	cout << "The numbers allocated at the beginning of the puzzle work as clues to find which digits are missing in each column and their position." << endl; 

	cout << "Rule 3 - The digits can only occur once per block(nonet)" << endl; 
	cout << "A regular 9 x 9 grid is divided into 9 smaller blocks of 3 x 3, also known as nonets.The numbers from 1 to 9 can only occur once per nonet." << endl; 

	cout << "In practice, this means that the process of filling the rows and columns without duplicated digits finds inside each block another restriction to the numbersâ€™ positioning." << endl; 

	cout << "Rule 4 - The sum of every single row, column and nonet must equal 45" << endl; 
	cout << "To find out which numbers are missing from each row, column or block or if there are any duplicates, the player can simply count or flex their math skills and sum the numbers.When the digits occur only once, the total of each row, column and group must be of 45." << endl; 

	cout << "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45" << endl; 

}; 


void drawCompletedBoard() {
	for (int row = 0; row < rows; row++) {
		cout << endl;
		for (int column = 0; column < columns; column++) {
			cout << "   " << solvedBoard[row][column];
		}
	}

}



void drawBoard(string sodukoBoard[9][9]) {
	for (int row = 0; row < rows; row++) {
		cout << endl;
		for (int column = 0; column < columns; column++) {
			cout << "   " << sodukoBoard[row][column];
		}
	}
};


void numberPlacement() {
	for (int row = 0; row < 9; row++) {
		if (row == rowNumber) {
			for (int column = 0; column < 9; column++) {
				if (column == columnNumber) {
					sodukoBoard[row][column] = to_string(chosenNumber); 
				}
			}
		}
	}
	drawBoard(sodukoBoard); 
}



int main(){
	SetConsoleTitle(TEXT("Sodoku Game: By Nick Hedges"));
	string response = "";

	setTextColor(5);

	cout << endl << endl << "Type rules for rules of game or start to begin game (also -1 for row and column will reveal completed board): ";
	cin >> response;
	if (response == "start") {
		system("CLS");
		drawBoard(sodukoBoard);
	}
	if (response == "rules") {
		gameRules();
	}
	while (running) {
		cout << endl << "enter row number: ";
		cin >> rowNumber;
		rowNumber = rowNumber - 1; 

		cout << endl << "enter column number: ";
		cin >> columnNumber;
		columnNumber = columnNumber - 1;

		cout << endl << "number to go there: ";
		cin >> chosenNumber;
		numberPlacement();
		system("CLS");
		drawBoard(sodukoBoard); 

		cout << endl << "Is puzzle fully filled? (-1 for revealed board) (y/n)";
		cin >> checkIfCompleted; 

		if (checkIfCompleted == "y") {
			checkIfWin();
		}
		if (checkIfCompleted == to_string(-1)) {
			drawCompletedBoard(); 
			running = false; 
		}
		else {
			continue; 
		}
	}
	return 0; 
}